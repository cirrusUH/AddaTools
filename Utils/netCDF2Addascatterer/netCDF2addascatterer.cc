/**
  Converts a netCDF scatterer representation into ADDA geometry ascii file

  assumes: c++11
  
  http://www.nrel.colostate.edu/projects/irc/public/Documents/Software/netCDF/cpp4/html/

  G Ritter, London, Sept 2016
 */

#include <fstream>
#include <iostream>
#include <sstream>
#include <limits>
#include <ios>
#include <list>
#include <chrono>
#include <ctime>
#include <iomanip>
#include <algorithm>

using std::cout;
using std::endl;
using std::cerr;

#include <tclap/CmdLine.h>
#include <tclap3dvector.h>

#include <grutils.hpp> 

#include <netcdf>
using namespace netCDF;
using namespace netCDF::exceptions;

// Return this in event of a problem.
static const int NC_ERR = 2;

int main( int argc, char*argv[] )
{
	if( argc < 2)
	{
		cerr << "Usage: " << argv[0] << " filename " << endl; 
		cerr << "       reads filename.nc and (over)writes filname.geom" << endl;
		return 1;
	} 

std::ifstream infile( argv[1] ); 

	if( !infile.is_open() )
	{
		cerr << "Could not open " << argv[1] << endl; 
		return EXIT_FAILURE;
	} 

	std::string ifilename, ofilename; 
	ifilename = ofilename = std::string(argv[1]);

std::size_t dotpos = ofilename.find_last_of('.');
	if( dotpos != std::string::npos)
	{
		ofilename = ofilename.substr(0, dotpos);
	} 

	ofilename = ofilename + ".geom";

std::chrono::time_point<std::chrono::system_clock> start, end; 
	start = std::chrono::system_clock::now(); 

NcDim x, y, z; 
//NcVar geom; 
size_t xDim, yDim, zDim; 
unsigned char*geomData;
int Nmat=0; 

    try
    {  
	    NcFile ncFile( ifilename.c_str(), NcFile::read ); 

	    x = ncFile.getDim("x"); 
	    y = ncFile.getDim("y"); 
	    z = ncFile.getDim("z"); 

	    xDim = x.getSize(); 
	    yDim = y.getSize(); 
	    zDim = z.getSize(); 

	    try 
	    {
		    geomData  = new unsigned char [xDim*yDim*zDim];
	    } 
	    catch(std::bad_alloc& ba)
	    {
		    // if too big, read slabs and write in zslabs
		    // for now just quit
		    cerr << "Out of memory, we would have needed ~" << (xDim*yDim*zDim)/1024 <<"MBs"<< endl; 
		    return EXIT_FAILURE;
	    } 
	    
	    NcVar geom = ncFile.getVar("geom"); 

		    geom.getVar(&geomData[0]); 

		    geom.getAtt("Nmat").getValues(&Nmat);
    }
    catch(NcException& e)
    {
    	    e.what(); 
    	    return NC_ERR;
    } 

   
   

    std::ofstream ofile( ofilename ); 
    	if( !ofile.is_open() )
	{
		cerr << "Could not open outputfile" << ofilename << endl; 
		return EXIT_FAILURE;
	} 


	// header 
	ofile << "#generated by netCDF2ADDAscatterer" << endl; 

size_t pos; 
	if( (pos = ifilename.find_last_of("/") ) != std::string::npos )
	{
		if( pos != ifilename.size() )
		{
			ifilename = ifilename.substr( pos+1, ifilename.size() ); 

			if(  (dotpos = ifilename.find_last_of(".") ) != std::string::npos )
			{
				ifilename = ifilename.substr(0, dotpos); 
			}
		} 
	}

	ofile << "#shape: '" << ifilename <<"'"<< endl; 
	ofile << "#box size: "<< xDim << "x"<<yDim<<"x"<<zDim<<endl; 

	if( Nmat == 1)
	{
		for(size_t zi=0; zi<zDim; zi++)
		for(size_t yi=0; yi<yDim; yi++)
		for(size_t xi=0; xi<xDim; xi++)
		{
		unsigned char mat = geomData[ tolinearC3D(xi,yi,zi,xDim,yDim,zDim) ]; 

			if( mat>0 )
			{
				ofile << xi<<" "<<yi<< " " << zi <<endl; 
			}
		}
	} 
	else
	{
		ofile << "Nmat=" << Nmat << endl; 

		for(size_t zi=0; zi<zDim; zi++)
		for(size_t yi=0; yi<yDim; yi++)
		for(size_t xi=0; xi<xDim; xi++)
		{
		unsigned char mat = geomData[ tolinearC3D(xi,yi,zi,xDim,yDim,zDim)]; 

			if( mat>0 )
			{	    
				ofile << xi<<" " << yi<< " " << zi << " " << int(mat) << endl; 
			}
		}    
	}


	delete [] geomData; 

	std::chrono::duration<double> elapsed_seconds = end-start; 

	cout << "Done. Elapsed time: " << elapsed_seconds.count() << "s" << endl; 

	return 0;
}
